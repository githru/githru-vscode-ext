## <!-- .cursor/rules/test.playwright.mdc -->

description: "Testing rules (Jest + RTL + Playwright)"
globs: ["**/*.{ts,tsx}"]
alwaysApply: true

---

# Testing Rules

## General

- File naming: `*.test.ts(x)` for unit/component, `*.spec.ts(x)` for integration/E2E.
- Co-locate tests with code when small; otherwise keep under `/tests`.
- Aim for high-value coverage (core logic ~80%+). Skip trivial one-liners.
- Naming: `describe(Component)` + `it('renders …')` with full-sentence style.
- **Comments must be in English** for international collaboration and maintainability.
- **Keep comments minimal and concise** - only add comments when they provide essential context or explain non-obvious behavior.

## Unit/Component (Jest + React Testing Library)

- Test **public behavior** (render, interaction, output). Avoid testing internals.
- Each critical component should include:
  - Render snapshot (basic mount),
  - Interaction (click, input, keyboard),
  - a11y basics (role/label presence, keyboard navigation),
  - Store selector correctness (mock store when needed).
- Prefer `screen.getByRole` over `getByTestId` unless no semantic alternative.
- Use `@testing-library/jest-dom` matchers for DOM assertions.

## Store (Zustand slices)

- Test actions:
  - Initial state correctness,
  - Success/error branches,
  - Immutable updates.
- Async actions: mock API calls, assert `isLoading/error/data` transitions.
- Test persistence middleware behavior when applicable.

## E2E (Playwright)

- Cover only critical flows:
  - Happy path: load → interact → result,
  - Core regressions: auth, filters, CRUD happy path.
- Store screenshots/videos on CI for failed runs.
- Prefer deterministic locators (role, label, data-testid) over CSS selectors.
- Use `page.waitForSelector` for dynamic content loading.

## Package-Specific Rules

### View Package

- Test React components with Jest + RTL
- Test Zustand stores (theme, branch, data, loading, etc.)
- E2E tests for webview interactions
- Mock VSCode API calls appropriately

### Analysis Engine Package

- Test core logic with Jest (Node environment)
- Mock external dependencies (GitHub API, file system)
- Test parsing and analysis algorithms

### VSCode Extension Package

- Test extension commands and utilities
- Mock VSCode extension API
- Test webview communication

## Iterative Test Refinement

- When a test fails, analyze the provided error log to identify the root cause.
- **Priority 1: Locators.** If an element is not found, correct the Playwright locator first. Prefer `getByRole`, `getByText`, `data-testid` in that order.
- **Priority 2: Timing.** If the locator is correct but the element is not ready, add or adjust `page.waitForSelector` or other appropriate `waitFor` functions. Do not use fixed `page.waitForTimeout()`.
- **Priority 3: Assertions.** Ensure the assertion (`expect()`) matches the actual state of the application described in the error log.
- Modify the minimum necessary code to fix the specific error. Do not refactor unrelated code.

## Accessibility

- Include basic accessibility checks (role/label presence, keyboard navigation).
- Ensure focus management in modals/menus is tested.

## Misc

- Keep tests fast/deterministic. Avoid real timeouts/network.
- Use Jest's timer mocking (`jest.useFakeTimers`) if time-dependent.
- Mock D3.js and other heavy dependencies appropriately.
- Use `testPathIgnorePatterns` to exclude build artifacts.
- Ensure focus management in modals/menus is tested.
